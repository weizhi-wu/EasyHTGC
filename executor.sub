##################################################################################
#
#   Generic Job Submit File Template for HTGC-3 / HTGC-3t
#
#   PURPOSE: This file defines the properties of a SINGLE job.
#   It is intended to be used as a template by a DAGMan workflow file.
#   Variables like $(exp_id) will be filled in by the .dag file.
#
##################################################################################

# --- Section 1: Core Job Definition ---
# The executable to run. This should be your shell wrapper.
executable = run_experiment.sh

# Arguments to pass to the executable.
# By default, we pass the experiment ID, which is provided by the DAG file.
# Your shell script (run_experiment.sh) will receive this as its first argument ($1).
arguments = "$(exp_id)"

# --- Section 2: Resource Requests ---
# These settings will apply to EVERY job submitted by the DAG.
request_gpus = 1
request_cpus = 4
request_memory = 16GB
request_disk = 20GB

# --- Section 3: Logging and Output Files ---
# These are crucial for debugging. We use the $(exp_id) to create
# unique, descriptive log files for each experiment.
output = logs/exp_$(exp_id).out
error = logs/exp_$(exp_id).err
log = logs/exp_$(exp_id).log

# --- Section 4: File Management ---
# Transfer all necessary files for a single run.
# Request enough disk space for the OS, your code, AND the uncompressed dataset.
transfer_input_files = src, dataset.tar.gz
should_transfer_files = YES
when_to_transfer_output = ON_EXIT

# --- Section 5: Job Environment & Policy ---
# Inherit your environment variables from the submit node.
getenv = True

# A custom runtime limit in seconds (e.g., 6 hours = 21600s).
# This will apply to EACH individual experiment job.
+MaxRuntime = 21600

# Optional: Require a specific CUDA version.
requirements = (CUDAVersion >= 11.8)

# --- Section 6: Notifications ---
# Get an email only if a specific experiment fails.
notification = Error
notify_user = your.email@example.com

# --- Section 7: Queueing Command ---
# CRITICAL: This MUST be `queue` without any numbers.
# The DAG file is responsible for creating the "loop," not this file.
queue
